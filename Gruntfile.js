// gruntjs.com

module.exports = function(grunt) {
	'use strict';

	var debug = !!grunt.option('debug');

	require('tamia-grunt')(grunt, {
		tamia: {
			author: 'Artem Sapegin, http://sapegin.me',
			src: 'src',
			dest: 'src/files',
			imagesSrc: 'src/files/images_src',
			imagesDest: 'src/files/images',
			modernizr: false,
			stylobuild: {
				autoprefixer: {
					browsers: 'last 2 versions, ie 9'
				}
			}
		},
		concat: {
			main: {
				nonull: true,
				src: [
					'<%= bower_concat.main.dest %>'
				],
				dest: '<%= tamia.dest %>/build/scripts.js',
			}
		},
		fontoptim: {
			ptserif: {
				src: '<%= tamia.src %>/fonts/PTSerif-*',
				dest: '<%= tamia.dest %>/build/ptserif',
				options: {
					fontFamily: 'PT Serif'
				}
			}
		}
	});

	// Based on https://github.com/bdadam/OptimizedWebfontLoading

	var fs = require('fs');
	var path = require('path');

	grunt.registerMultiTask('fontoptim', 'Generate CSS files with WOFF(2) fonts embedded as Base64.', function() {
		var options = this.options({
			fontFamily: this.target,
			template: [
				'@font-face{',
					'font-family:"<%=family%>";',
					'src:url(<%=uri%>) format("<%=format%>");',
					'font-weight:<%=weight%>;',
					'font-style:<%=style%>',
				'}'
			].join(''),
			banner: '/* Generated by grunt-fontoptim */\n'
		});

		// Generate CSS strings
		var fontsCss = {};
		this.filesSrc.forEach(function(fontFile) {
			var dataUri = fs.readFileSync(fontFile, 'base64');
			var extension = path.extname(fontFile);
			var fontFormat = extension.substring(1);
			var fontKind = path.basename(fontFile, extension);
			if (fontKind.indexOf('-') !== -1) {
				fontKind = fontKind.split('-').pop();
			}
			var fontWeight = /bold/i.test(fontKind) ? 600 : 400;
			var fontStyle = /it/i.test(fontKind) ? 'italic' : 'normal';
			var fontUri = 'data:application/x-font-' + fontFormat + ';charset=utf-8;base64,' + dataUri;
			var css = grunt.template.process(options.template, {data: {
				family: options.fontFamily,
				uri: fontUri,
				format: fontFormat,
				weight: fontWeight,
				style: fontStyle,
			}});
			if (!fontsCss[fontFormat]) {
				fontsCss[fontFormat] = [];
			}
			fontsCss[fontFormat].push(css);			
		});

		// Write CSS files
		for (var type in fontsCss) {
			var css = options.banner + fontsCss[type].join('\n');
			var filename = this.data.dest + '.' + type + '.css';
			grunt.file.write(filename, css);
			grunt.log.writeln('File ' + filename.cyan + ' created.');
		}
	});

	grunt.registerTask('default', ['scripts', 'styles', 'images']);
	grunt.registerTask('deploy', ['scripts', 'styles']);

};
